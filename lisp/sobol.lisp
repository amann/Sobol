(defpackage #:sobol
  (:nicknames #:s)
  (:use #:cl))

(in-package #:sobol)

(defun read-polynomials (file dimension)
  (with-open-file (*standard-input* file)
    (read-line)
    (do* ((d 1 (read))
          (s 32 (read))
          (a 0 (read))
          (m (make-array s :initial-element 1)
                  (let ((m (make-array s)))
                    (dotimes (i s m)
                      (setf (svref m i) (read)))))
          (result (list (cons a m))
                  (cons (cons a m) result)))
         ((<= dimension d) (nreverse result)))))

(defun compute-direction-numbers (polynomials nbr-points)
  (let ((l (integer-length nbr-points))
        result)
    (dolist (item polynomials result)
      (push (let* ((a (car item))
                   (m (cdr item))
                   (s (length m))
                   (v (make-array l)))
              (dotimes (k (min l s))
                (setf (svref v k) (ash (svref m k) (- 31 k))))
              (dotimes (k (- l s) v)
                (let* ((v_k (svref v k))
                       (v_k+s (logxor v_k (ash v_k (- s))))
                       (k+s (+ k s)))
                  (setf (svref v k+s)
                        (dotimes (r (- s 1) v_k+s)
                          (setf v_k+s
                                (logxor v_k+s
                                        (if (ldb-test (byte 1 (- s 2 r))
                                                      a)
                                            (svref v (- k+s 1 r))
                                            0))))))))
            result))))

(defun zero@idx (integer)
  (do ((idx 0 (1+ idx)))
      ((not (ldb-test (byte 1 idx) integer)) idx)))

(defun sobol-points (nbr-points dimension file)
  (let ((direction-numbers (compute-direction-numbers (read-polynomials file dimension)
                                                      nbr-points))
        (2^32 (expt 2 32)))
    (dolist (v direction-numbers)
      (let ((x 0))
        (dotimes (n nbr-points)
          (format t " ~A"
                  (/ (setf x (logxor x (svref v (zero@idx n))))
                     2^32))))
      (terpri))))
